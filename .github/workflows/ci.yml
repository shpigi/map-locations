name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests
      env:
        CI: true
      run: |
        pytest tests/ -v --cov=map_locations --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run linting
      run: |
        flake8 map_locations/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 map_locations/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

    - name: Check code formatting
      run: |
        black --check map_locations/ tests/
        isort --check-only map_locations/ tests/

    - name: Type checking
      run: |
        pip install types-PyYAML types-requests
        mypy map_locations/ --ignore-missing-imports

  example-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run example tests
      env:
        CI: true
      run: |
        pytest tests/test_examples.py -v

    - name: Test CLI functionality
      run: |
        python -m map_locations.cli --help
        python -m map_locations.cli map --help
        python -m map_locations.cli export --help

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e .

    - name: Check version consistency
      run: |
        echo "üîç Checking version consistency..."
        echo "Main package version from __init__.py: $(python -c "import map_locations; print(map_locations.__version__)")"
        echo "Main package version from pyproject.toml: $(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['dynamic'])")"
        echo "AI package version from __init__.py: $(python -c "import map_locations_ai; print(map_locations_ai.__version__)")"
        echo "‚úÖ Version check completed"

    - name: Build package
      run: |
        rm -rf dist/ build/ *.egg-info/
        python -m build
        echo "üì¶ Build output:"
        ls -la dist/

    - name: Check package
      run: |
        twine check dist/*

    - name: Verify built package version
      run: |
        echo "üì¶ Built package version:"
        ls -la dist/
        echo ""
        echo "Package metadata:"
        python -c "import glob; import zipfile; wheel_files = [f for f in glob.glob('dist/*') if f.endswith('.whl') and 'map_locations' in f and not 'map_locations_ai' in f]; print(f'Filtered wheel files: {wheel_files}'); print(f'All dist files: {glob.glob(\"dist/*\")}'); z = zipfile.ZipFile(wheel_files[0]) if wheel_files else exit(1); print([f for f in z.namelist() if 'METADATA' in f])"

    - name: Verify AI package structure
      run: |
        echo "üîç Verifying AI package structure..."
        if [ -d "map_locations_ai" ]; then
          echo "‚úÖ AI package directory exists"
          ls -la map_locations_ai/
          echo ""
          echo "Required files check:"
          [ -f "map_locations_ai/pipeline.py" ] && echo "‚úÖ pipeline.py exists" || echo "‚ùå pipeline.py missing"
          [ -f "map_locations_ai/config.yaml" ] && echo "‚úÖ config.yaml exists" || echo "‚ùå config.yaml missing"
          [ -f "map_locations_ai/agent_prompt.txt" ] && echo "‚úÖ agent_prompt.txt exists" || echo "‚ùå agent_prompt.txt missing"
        else
          echo "‚ùå AI package directory not found"
          exit 1
        fi

    - name: Check all packages
      run: |
        echo "üîç Checking all built packages:"
        twine check dist/*
        echo "‚úÖ All packages validated successfully"

    - name: Test combined build process
      run: |
        echo "üßπ Cleaning for combined build test..."
        if [ -f "Makefile" ]; then
          make clean
          echo "üèóÔ∏è  Testing combined build process..."
          make build
          echo "üì¶ Combined build results:"
          ls -la dist/
          echo "‚úÖ Combined build test completed"
        else
          echo "‚ö†Ô∏è  Makefile not found, skipping combined build test"
        fi
