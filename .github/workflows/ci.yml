name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests
      run: |
        pytest tests/ -v --cov=map_locations --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run linting
      run: |
        flake8 map_locations/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 map_locations/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

    - name: Check code formatting
      run: |
        black --check map_locations/ tests/
        isort --check-only map_locations/ tests/

    - name: Type checking
      run: |
        mypy map_locations/ --ignore-missing-imports

  example-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run example tests
      run: |
        pytest tests/test_examples.py -v

    - name: Test CLI functionality
      run: |
        python -m map_locations.cli --help
        python -m map_locations.cli map --help
        python -m map_locations.cli export --help

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Check version consistency
      run: |
        echo "üîç Checking version consistency..."
        echo "Version from __init__.py: $(python -c "import map_locations; print(map_locations.__version__)")"
        echo "Version from pyproject.toml: $(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['dynamic'])")"
        echo "‚úÖ Version check completed"

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Verify built package version
      run: |
        echo "üì¶ Built package version:"
        ls -la dist/
        echo ""
        echo "Package metadata:"
        python -c "import glob; import zipfile; wheel_files = glob.glob('dist/map_locations-*.whl'); z = zipfile.ZipFile(wheel_files[0]); print([f for f in z.namelist() if 'METADATA' in f])"
