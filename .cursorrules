# Cursor Rules for Map Locations Project

# Always include core.py in context
@include map_locations/core.py

## Project Overview
This is a Python library and CLI tool for mapping locations with interactive filtering and visualization capabilities. The project uses Folium for interactive maps, YAML for configuration, and supports multiple export formats.

## Code Style and Standards

### Python Code Style
- Follow PEP 8 style guidelines
- Use type hints for function parameters and return values
- Keep functions focused and single-purpose
- Use descriptive variable and function names
- Add docstrings for all public functions and classes
- Use f-strings for string formatting (Python 3.6+)

### Linting and Code Quality Standards
- **Line Length**: Keep all lines under 100 characters (project standard)
- **F-strings**: Only use f-strings when there are actual placeholders (avoid F541)
- **Imports**: Remove unused imports immediately (F401)
- **Whitespace**: 
  - No trailing whitespace (W291)
  - No whitespace in blank lines (W293)
  - Always end files with a newline (W292)
- **String Formatting**: Use f-strings only when interpolating variables
- **Long Lines**: Break long lines using parentheses, backslashes, or string concatenation
- **Docstrings**: Keep docstring lines under 100 characters

**Note**: The 100-character limit (vs PEP 8's 79) allows for more readable code on modern wide screens while still maintaining good readability and avoiding horizontal scrolling.

### Common Linting Patterns to Follow

#### Line Length Examples
```python
# ‚ùå Too long (over 100 characters)
description = f"Type: {loc.get('type', '')}<br>Tags: {tags_str}<br>Neighborhood: {loc.get('neighborhood', '')}<br>Date Added: {loc.get('date_added', '')}<br>Date Visited: {loc.get('date_visited', '')}"

# ‚úÖ Properly broken (under 100 characters)
description = (
    f"Type: {loc.get('type', '')}<br>"
    f"Tags: {tags_str}<br>"
    f"Neighborhood: {loc.get('neighborhood', '')}<br>"
    f"Date Added: {loc.get('date_added', '')}<br>"
    f"Date Visited: {loc.get('date_visited', '')}"
)

# ‚úÖ With 100-character limit, this is now acceptable:
help_text = "Output path (without extension for all formats, or with extension for specific format)"
```

#### F-string Usage
```python
# ‚ùå F-string without placeholders (F541)
print(f"‚úÖ Export completed successfully!")

# ‚úÖ Regular string when no interpolation needed
print("‚úÖ Export completed successfully!")

# ‚úÖ F-string with placeholders
print(f"üìç Loaded {len(locations)} locations")
```

#### Import Management
```python
# ‚ùå Unused import
from pathlib import Path  # If Path is not used

# ‚úÖ Only import what you use
from pathlib import Path
# Use Path in the code, or remove the import
```

#### Whitespace Rules
```python
# ‚ùå Trailing whitespace
def test_function():    
    return True

# ‚úÖ Clean whitespace
def test_function():
    return True

# ‚ùå Whitespace in blank lines
def test_function():

    return True

# ‚úÖ Clean blank lines
def test_function():

    return True
```

#### Function Signature Line Length
```python
# ‚ùå Too long
def show_locations_grouped(locations, group_by="neighborhood", map_filename="map.html"):

# ‚úÖ Properly broken
def show_locations_grouped(
    locations, group_by="neighborhood", map_filename="map.html"
):
```

#### Docstring Line Length
```python
# ‚ùå Too long docstring line (over 100 characters)
"""
Map Locations - A Python library for mapping locations with interactive filtering and visualization capabilities.
"""

# ‚úÖ Properly broken (under 100 characters)
"""
Map Locations - A Python library for mapping locations with interactive filtering and
visualization capabilities.
"""
```

### Development Workflow and Tools

#### Pre-commit Checks
- Always run `make lint` before committing code
- Use `make test` to ensure all tests pass
- Consider setting up pre-commit hooks to automatically check code quality

#### IDE Configuration
- Configure your IDE to show line length guides at 100 characters
- Enable real-time linting with flake8
- Set up auto-formatting with black or autopep8
- Configure your editor to trim trailing whitespace automatically

#### Common Commands
```bash
# Install development dependencies (includes isort)
pip install -e ".[dev]"

# Check code quality
make lint

# Run tests
make test

# Format code with black and isort
make format

# Format code manually
black map_locations/ tests/
isort map_locations/ tests/

# Auto-fix some issues
autopep8 --in-place --aggressive --aggressive map_locations/ tests/
```

#### Code Review Checklist
Before submitting code for review, ensure:
- [ ] All lines are under 100 characters
- [ ] No unused imports
- [ ] No f-strings without placeholders
- [ ] No trailing whitespace
- [ ] No whitespace in blank lines
- [ ] Files end with newline
- [ ] All tests pass
- [ ] Code follows project patterns

### File Organization
- Keep related functionality in the same module
- Separate CLI logic from core library functionality
- Use `__init__.py` files to expose public API
- Group imports: standard library, third-party, local imports

### Documentation
- Write clear, concise docstrings using Google or NumPy style
- Include examples in docstrings for complex functions
- Update README.md when adding new features
- Document CLI commands and their options

## Development Guidelines

### Error Handling
- Use specific exception types rather than generic `Exception`
- Provide meaningful error messages
- Handle file I/O errors gracefully
- Validate input data early and clearly

### Testing
- Write unit tests for core functionality
- Test edge cases and error conditions
- Use pytest for testing framework
- Mock external dependencies in tests

### Data Validation
- Validate YAML structure and required fields
- Check coordinate ranges (latitude: -90 to 90, longitude: -180 to 180)
- Ensure required fields are present in location data
- Provide helpful error messages for invalid data

## Project-Specific Rules

### Map Generation
- Use Folium for interactive map creation
- Implement consistent color coding for location types
- Support multiple grouping options (neighborhood, type, date)
- Include layer controls for group visibility
- Add popup information with location details

### CLI Interface
- Use argparse for command-line argument parsing
- Provide helpful help messages
- Support multiple input/output formats
- Include progress indicators for long operations

### YAML Configuration
- Use PyYAML for YAML parsing
- Validate YAML structure against expected schema
- Support optional fields with sensible defaults
- Handle missing or malformed YAML gracefully

### Export Formats
- Support KML export using SimpleKML
- Generate valid GeoJSON format
- Create self-contained HTML maps
- Ensure exported files are properly formatted

## Code Quality

### Performance
- Use generators for large datasets
- Minimize memory usage when processing locations
- Cache expensive operations when appropriate
- Use efficient data structures

### Security
- Validate file paths to prevent directory traversal
- Sanitize user input for file operations
- Use safe YAML loading (avoid `yaml.load()`)
- Handle sensitive data appropriately

### Maintainability
- Write self-documenting code
- Use constants for magic numbers and strings
- Keep functions under 50 lines when possible
- Use meaningful variable names

## Common Patterns

### Location Data Structure
```python
Location = {
    'name': str,           # Required
    'type': str,           # Required
    'latitude': float,      # Required
    'longitude': float,     # Required
    'tags': List[str],      # Optional
    'neighborhood': str,    # Optional
    'date_added': str,      # Optional
    'date_visited': str     # Optional
}
```

### Function Signatures
- Use type hints for all function parameters
- Include default values for optional parameters
- Return meaningful values or None
- Use descriptive parameter names

### Error Messages
- Be specific about what went wrong
- Include the problematic value when relevant
- Suggest how to fix the issue
- Use consistent error message format

## Testing Guidelines

### Unit Tests
- Test each function independently
- Mock external dependencies
- Test both success and failure cases
- Use descriptive test names

### Integration Tests
- Test complete workflows
- Test file I/O operations
- Test CLI commands end-to-end
- Verify output formats

## Documentation Standards

### Code Comments
- Explain complex algorithms
- Document non-obvious business logic
- Comment on workarounds or limitations
- Keep comments up-to-date with code changes

### README Updates
- Document new features and options
- Include usage examples
- Update installation instructions
- Keep feature list current

## Git Workflow

### Commit Messages
- Use descriptive commit messages
- Start with a verb (Add, Fix, Update, etc.)
- Keep first line under 50 characters
- Add details in body if needed

### Branch Naming
- Use descriptive branch names
- Include feature/ or fix/ prefix
- Use kebab-case for branch names

## Performance Considerations

### Memory Usage
- Process large datasets in chunks
- Use generators for iteration
- Clean up resources properly
- Monitor memory usage for large maps

### File I/O
- Use context managers for file operations
- Handle encoding properly
- Validate file paths before operations
- Provide progress feedback for large files

## Security Best Practices

### Input Validation
- Validate all user inputs
- Sanitize file paths
- Check file permissions
- Handle malformed data gracefully

### File Operations
- Use absolute paths when needed
- Check file existence before operations
- Handle permission errors
- Validate file formats

## Accessibility and UX

### Map Features
- Ensure color coding is distinguishable
- Provide alternative text for visual elements
- Use high contrast colors
- Support keyboard navigation

### CLI Interface
- Provide clear help messages
- Use consistent command structure
- Include examples in help text
- Handle invalid input gracefully

## Future Considerations

### Extensibility
- Design for easy addition of new location types
- Support custom color schemes
- Allow custom popup templates
- Enable plugin architecture

### Scalability
- Support large numbers of locations
- Optimize map rendering performance
- Consider clustering for dense areas
- Plan for multiple map layers

Remember to update these rules as the project evolves and new patterns emerge. 