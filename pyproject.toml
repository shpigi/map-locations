[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "map-locations"
dynamic = ["version"]
description = "A Python library for mapping locations with interactive filtering and visualization capabilities"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Lavi Shpigelman", email = "lavi.shpigelman@gmail.com"}
]
maintainers = [
    {name = "Lavi Shpigelman", email = "lavi.shpigelman@gmail.com"}
]
keywords = [
    "maps",
    "locations",
    "folium",
    "yaml",
    "geojson",
    "kml",
    "gis",
    "geospatial",
    "data-visualization",
    "ai-friendly",
    "type-hints",
    "data-analysis"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = [
    "folium>=0.14.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.3.0",
    "types-PyYAML",
    "pre-commit>=3.0.0",
    "twine>=4.0.0",
    "build>=1.0.0",
]

[project.scripts]
map-locations = "map_locations.cli:main"

[project.urls]
Homepage = "https://github.com/shpigi/map-locations"
Repository = "https://github.com/shpigi/map-locations"
Documentation = "https://github.com/shpigi/map-locations#readme"
"Bug Tracker" = "https://github.com/shpigi/map-locations/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["map_locations*"]

[tool.setuptools.dynamic]
version = {attr = "map_locations.__version__"}

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=map_locations",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["map_locations"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
